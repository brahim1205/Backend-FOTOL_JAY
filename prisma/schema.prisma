generator client {
  provider = "prisma-client-js"
  output   = "../src/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(cuid())
  email               String               @unique
  password            String
  role             RoleUtilisateur @default(USER)
  reputation          Int                  @default(0)
  isVip               Boolean              @default(false)
  registrationDate    DateTime             @default(now())
  lastLogin           DateTime?
  phone               String?
  firstName           String?
  lastName            String?
  profilePicture      String?
  location            String?
  fcmToken            String?
  emailVerified       Boolean              @default(false)
  emailToken          String?
  resetToken          String?
  resetExpires        DateTime?
  lastLoginIP         String?
  loginAttempts       Int                  @default(0)
  lockedUntil         DateTime?
  analyticsEvents     AnalyticsEvent[]
  auditLogs           AuditLog[]
  receivedMessages    ChatMessage[]        @relation("ToUser")
  sentMessages        ChatMessage[]        @relation("FromUser")
  comments            Comment[]
  buyerCommissions    Commission[]         @relation("BuyerCommissions")
  sellerCommissions   Commission[]         @relation("SellerCommissions")
  CreditTransaction   CreditTransaction[]
  credits             Credit?
  dashboardMetrics    DashboardMetrics[]
  favorites           Favorite[]
  likes               Like[]
  ModerationLog       ModerationLog[]
  notifications       Notification[]
  sellerOrders        Order[]              @relation("SellerOrders")
  buyerOrders         Order[]              @relation("BuyerOrders")
  paymentTransactions PaymentTransaction[]
  posts               Post[]
  products            Product[]
  referredReferrals   Referral[]           @relation("ReferredReferrals")
  referrerReferrals   Referral[]           @relation("ReferrerReferrals")
  adminReports        Report[]             @relation("AdminReports")
  reports             Report[]             @relation("ReporterReports")
  reviews             Review[]
  transactions        Transaction[]
  sessions            UserSession[]
  vipSubscription     VipSubscription?

  @@map("users")
}

model Product {
  id              String        @id @default(cuid())
  title           String
  description     String
  price           Float
  images          Json
  status       StatutProduit @default(PENDING)
  sellerId        String
  views           Int           @default(0)
  publishDate     DateTime      @default(now())
  expiration      DateTime
  renewalCount    Int           @default(0)
  location        String
  category        String?
  condition       String?
  categoryId      String?
  locationId      String?
  messages        ChatMessage[]
  commissions     Commission[]
  favorites       Favorite[]
  likes           Like[]
  orders          Order[]
  boost           ProductBoost?
  productLocation Location?     @relation(fields: [locationId], references: [id])
  productCategory Category?     @relation(fields: [categoryId], references: [id])
  seller          User          @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  reviews         Review[]

  @@map("products")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  payload   Json
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model ChatMessage {
  id         String   @id @default(cuid())
  fromUserId String
  toUserId   String
  productId  String?
  message    String
  createdAt  DateTime @default(now())
  product    Product? @relation(fields: [productId], references: [id])
  toUser     User     @relation("ToUser", fields: [toUserId], references: [id], onDelete: Cascade)
  fromUser   User     @relation("FromUser", fields: [fromUserId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

model Credit {
  id      String @id @default(cuid())
  userId  String @unique
  balance Int    @default(0)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("credits")
}

model Review {
  id        String   @id @default(cuid())
  productId String
  userId    String
  rating    Int
  comment   String?
  photos    Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, userId])
  @@map("reviews")
}

model Favorite {
  id        String   @id @default(cuid())
  productId String
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, userId])
  @@map("favorites")
}

model Like {
  id        String   @id @default(cuid())
  productId String
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, userId])
  @@map("likes")
}

model Transaction {
  id          String   @id @default(cuid())
  userId      String
  type        String
  amount      Float
  currency    String   @default("EUR")
  status      String   @default("pending")
  description String?
  reference   String?
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model Order {
  id              String      @id @default(cuid())
  buyerId         String
  sellerId        String
  productId       String
  quantity        Int         @default(1)
  totalAmount     Float
  status          String      @default("pending")
  shippingAddress Json?
  trackingNumber  String?
  notes           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  commission      Commission?
  product         Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  seller          User        @relation("SellerOrders", fields: [sellerId], references: [id], onDelete: Cascade)
  buyer           User        @relation("BuyerOrders", fields: [buyerId], references: [id], onDelete: Cascade)

  @@map("orders")
}

model Category {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  icon        String?
  parentId    String?
  createdAt   DateTime   @default(now())
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  forums      Forum[]
  products    Product[]

  @@map("categories")
}

model Location {
  id        String    @id @default(cuid())
  name      String
  latitude  Float?
  longitude Float?
  country   String    @default("France")
  createdAt DateTime  @default(now())
  forums    Forum[]
  products  Product[]

  @@map("locations")
}

model AnalyticsEvent {
  id         String   @id @default(cuid())
  userId     String?
  eventType  String
  entityId   String?
  entityType String?
  metadata   Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  user       User?    @relation(fields: [userId], references: [id])

  @@map("analytics_events")
}

model DashboardMetrics {
  id          String   @id @default(cuid())
  userId      String
  metricType  String
  period      String
  periodStart DateTime
  periodEnd   DateTime
  value       Float
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, metricType, period, periodStart])
  @@map("dashboard_metrics")
}

model Forum {
  id          String    @id @default(cuid())
  name        String
  description String?
  categoryId  String?
  locationId  String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  location    Location? @relation(fields: [locationId], references: [id])
  category    Category? @relation(fields: [categoryId], references: [id])
  posts       Post[]

  @@map("forums")
}

model Post {
  id        String    @id @default(cuid())
  forumId   String
  authorId  String
  title     String
  content   String
  isPinned  Boolean   @default(false)
  isLocked  Boolean   @default(false)
  views     Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  forum     Forum     @relation(fields: [forumId], references: [id], onDelete: Cascade)

  @@map("posts")
}

model Comment {
  id        String    @id @default(cuid())
  postId    String
  authorId  String
  content   String
  parentId  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String
  type        String
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean  @default(true)
  discount    Float?
  targetUsers Json?
  metadata    Json?
  createdAt   DateTime @default(now())

  @@map("events")
}

model Referral {
  id          String    @id @default(cuid())
  referrerId  String
  referredId  String
  code        String    @unique
  status      String    @default("pending")
  rewardGiven Boolean   @default(false)
  createdAt   DateTime  @default(now())
  completedAt DateTime?
  referred    User      @relation("ReferredReferrals", fields: [referredId], references: [id])
  referrer    User      @relation("ReferrerReferrals", fields: [referrerId], references: [id])

  @@map("referrals")
}

model CreditTransaction {
  id          String   @id @default(cuid())
  userId      String
  type        String
  amount      Int
  description String?
  reference   String?
  metadata    Json?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("credit_transactions")
}

model VipSubscription {
  id          String    @id @default(cuid())
  userId      String    @unique
  plan        String
  startDate   DateTime  @default(now())
  endDate     DateTime
  isActive    Boolean   @default(true)
  autoRenew   Boolean   @default(false)
  paymentRef  String?
  cancelledAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("vip_subscriptions")
}

model ModerationLog {
  id         String   @id @default(cuid())
  adminId    String
  action     String
  targetType String
  targetId   String
  reason     String?
  metadata   Json?
  createdAt  DateTime @default(now())
  admin      User     @relation(fields: [adminId], references: [id])

  @@map("moderation_logs")
}

model Report {
  id          String    @id @default(cuid())
  reporterId  String
  targetType  String
  targetId    String
  reason      String
  description String?
  status      String    @default("pending")
  adminId     String?
  resolvedAt  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  admin       User?     @relation("AdminReports", fields: [adminId], references: [id])
  reporter    User      @relation("ReporterReports", fields: [reporterId], references: [id])

  @@map("reports")
}

model ProductBoost {
  id        String   @id @default(cuid())
  productId String   @unique
  boostType String
  startDate DateTime @default(now())
  endDate   DateTime
  cost      Int
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_boosts")
}

model UserSession {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  ipAddress String?
  userAgent String?
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String?
  action     String
  resource   String
  resourceId String?
  oldValues  Json?
  newValues  Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  user       User?    @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model PaymentTransaction {
  id            String   @id @default(cuid())
  userId        String
  type          String
  amount        Float
  currency      String   @default("XOF")
  status        String   @default("pending")
  paydunyaRef   String?
  paydunyaToken String?
  metadata      Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payment_transactions")
}

model Commission {
  id         String    @id @default(cuid())
  orderId    String    @unique
  sellerId   String
  buyerId    String
  productId  String
  amount     Float
  percentage Float
  status     String    @default("pending")
  paidAt     DateTime?
  createdAt  DateTime  @default(now())
  product    Product   @relation(fields: [productId], references: [id])
  buyer      User      @relation("BuyerCommissions", fields: [buyerId], references: [id])
  seller     User      @relation("SellerCommissions", fields: [sellerId], references: [id])
  order      Order     @relation(fields: [orderId], references: [id])

  @@map("commissions")
}

enum RoleUtilisateur {
  USER
  VENDEUR
  VIP
  PRO
  MODERATOR
  ADMIN
}

enum StatutProduit {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
  SOLD
}
